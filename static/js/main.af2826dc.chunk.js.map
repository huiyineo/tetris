{"version":3,"sources":["Tetris/Commons/Dot.js","Utils/utils.js","Tetris/Commons/Block.js","Tetris/NextBlock.js","Tetris/RotateBlock.js","Tetris/Commons/Score.js","Tetris/Commons/Speed.js","Tetris/Board.js","Tetris/Control.js","Tetris/Commons/SmallBoard.js","Tetris/Decorate.js","Tetris/Tetris.js","App.js","index.js"],"names":["Dot","className","this","props","isActivated","value","isInBlock","React","Component","utils","random","min","max","Math","floor","randomFromArray","arr","length","printMatrix","matrix","output","rowLen","i","colLen","j","toString","padStart","console","log","printBlock","block","content","name","putBlockInSquare","startX","startY","blockRow","blockCol","size","rotateBlock","blocks","I","J","L","S","T","Z","relTransform","nextIdx","index","newBlock","JSON","parse","stringify","transformX","transformY","rotateMatrix","square","len","rotatedMatrix","rotateMatrixSpecial","rotated","blockToMatrix","row","col","tgm3Randomizer","Block","pieces","O","blocksForNext","new","letter","newSquare","next","simpleRandom","tgm3RandomNext","tgm3Rand","tgm3RandomNew","tgm3Random","newTgm3Random","order","pool","concat","firstPiece","history","roll","piece","includes","splice","indexOf","push","shift","NextBlock","state","Array","fill","smallBoard","map","rowIdx","key","colIdx","onClick","setState","RotateBlock","x","y","forEach","blockObj","blockIdx","rotateBlocks","Score","linePoints","level","line","droppedPoints","type","Speed","getSpeed","Board","boardRowCount","boardColCount","mouseUpForDownButton","board","initEmptyBoard","movingBlock","blockX","blockY","blockNo","intervalId","speed","inDrop","clearedLinePoint","inPlay","getRepeatedRows","setIntervalNormalMoveDown","clearInterval","setInterval","moveBlock","blockLetter","requestNewBlock","some","v","newBoard","drawBlockInBoard","repeats","rows","filtered","filter","every","cell","newRows","filledRowCount","updateClearedLines","calculateLevel","updateSpeed","updateLevels","updateScores","calculateScores","point","cleared","totalLevel","parseInt","sum","lenX","lenY","moveX","moveY","blockHitNotMovingDot","extraX","rowHasDot","getLastRowHasDot","isFirstRowHaveDot","stillCanMoveDown","hitNotMovingDot","pinCurrentBlock","clearFilledRow","createNewBlock","getNextRowIndex","total","num","round","finalY","ableToShiftLeftRight","rightEdge","getBlockLastIndexOfOne","rightEdgeIndex","idx","reduce","curr","lastIndexOf","right","getExtraBlockToWallKick","newBlockX","newBlockY","count","current","sleep","milliseconds","Promise","resolve","setTimeout","accelerate","lineCount","repeat","drawBoard","checkIsActivated","checkIsInBlock","Control","moveLeft","moveRight","onMouseDown","down","onMouseUp","mouseUp","drop","playPause","resetGame","SmallBoard","blockName","Decorate","Tetris","handleKeyDown","e","preventDefault","keyCode","moveBlockHandler","rotateBlockHandler","handleKeyUp","currentBlockLetter","nextBlockLetter","scores","newBlockHandler","bind","createRef","shiftLeftRight","document","addEventListener","removeEventListener","ref","App","useState","gameId","setGameId","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.af2826dc.chunk.js","sourcesContent":["import React from \"react\";\n\nclass Dot extends React.Component {\n  render() {\n    return (\n      <>\n        <div className={this.props.isActivated \n          ? \"dot filled\" + (this.props.value ? this.props.value % 10 : \"\") : (this.props.isInBlock? \"dot highlight\" : \"dot\")}></div>\n        {/* <span className=\"dot-content\">\n          {this.props.value ? this.props.value : \"\"}\n        </span> */}\n      </>\n    );\n  }\n}\n\nexport default Dot;\n","const utils = {\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  randomFromArray: (arr) => arr[utils.random(0, arr.length - 1)],\n\n  printMatrix: (matrix) => {\n    let output = \"\";\n    const rowLen = matrix.length;\n\n    for (let i = 0; i < rowLen; i++) {\n      const colLen = matrix[i].length;\n\n      for (let j = 0; j < colLen; j++) {\n        output += matrix[i][j].toString().padStart(5, \" \");\n      }\n      output += \"\\n\";\n    }\n    console.log(output);\n  },\n\n  printBlock: (block) => {\n    let output = \"\";\n    const rowLen = block.content.length;\n    console.log(block.name);\n\n    for (let i = 0; i < rowLen; i++) {\n      const colLen = block.content[i].length;\n\n      for (let j = 0; j < colLen; j++) {\n        output += block.content[i][j].toString().padStart(5, \" \");\n      }\n      output += \"\\n\";\n    }\n    console.log(output);\n  },\n\n  putBlockInSquare: (block, startX, startY) => {\n    const matrix = [];\n    const content = block.content;\n    const blockRow = content.length;\n    const blockCol = content[0].length;\n    const size = Math.max(blockRow, blockCol);\n\n    for (let i = 0; i < size; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < size; j++) {\n        if (\n          i - startX >= 0 &&\n          j - startY >= 0 &&\n          i < blockRow + startX &&\n          j < blockCol + startY\n        ) {\n          matrix[i][j] = content[i - startX][j - startY];\n        } else {\n          matrix[i][j] = 0;\n        }\n      }\n    }\n\n    return matrix;\n  },\n\n  rotateBlock: (block) => {\n    if (block.name === \"O\") {\n      return block;\n    }\n\n    const tetris = {\n      I: [[[1], [1], [1], [1]], [[1, 1, 1, 1]]],\n      J: [\n        [\n          [0, 1],\n          [0, 1],\n          [1, 1],\n        ],\n        [\n          [1, 0, 0],\n          [1, 1, 1],\n        ],\n        [\n          [1, 1],\n          [1, 0],\n          [1, 0],\n        ],\n        [\n          [1, 1, 1],\n          [0, 0, 1],\n        ],\n      ],\n      L: [\n        [\n          [1, 1],\n          [0, 1],\n          [0, 1],\n        ],\n        [\n          [0, 0, 1],\n          [1, 1, 1],\n        ],\n        [\n          [1, 0],\n          [1, 0],\n          [1, 1],\n        ],\n        [\n          [1, 1, 1],\n          [1, 0, 0],\n        ],\n      ],\n      S: [\n        [\n          [1, 0],\n          [1, 1],\n          [0, 1],\n        ],\n        [\n          [0, 1, 1],\n          [1, 1, 0],\n        ],\n      ],\n      T: [\n        [\n          [0, 1, 0],\n          [1, 1, 1],\n        ],\n        [\n          [1, 0],\n          [1, 1],\n          [1, 0],\n        ],\n        [\n          [1, 1, 1],\n          [0, 1, 0],\n        ],\n        [\n          [0, 1],\n          [1, 1],\n          [0, 1],\n        ],\n      ],\n      Z: [\n        [\n          [0, 1],\n          [1, 1],\n          [1, 0],\n        ],\n        [\n          [1, 1, 0],\n          [0, 1, 1],\n        ],\n      ],\n    };\n    const relTransformList ={\n      I: [[-2, 1],[1, -1],[-1, 2],[2, -2],],\n      J: [[-1, 0],[0, 0],[0, 1],[1, -1],],\n      L: [[-1, 0],[0, 0],[0, 1],[1, -1],],\n      S: [[-1, 0],[0, 0],[0, 1],[1, -1],],\n      T: [[0, 0],[0, 1],[1, -1],[-1, 0],],\n      Z: [[-1, 0],[0, 0],[0, 1],[1, -1],],}\n\n    const blocks = tetris[block.name];\n    const relTransform = relTransformList[block.name];\n\n    let nextIdx = (block.index + 1) % relTransform.length;\n    let newBlock = JSON.parse(JSON.stringify(block));\n    newBlock.content = blocks[nextIdx % blocks.length];\n    newBlock.index = nextIdx;\n    \n    newBlock.transformX = relTransform[nextIdx][0];\n    newBlock.transformY = relTransform[nextIdx][1];\n\n    return newBlock;    \n  },\n\n  rotateMatrix: (square) => {\n    const len = square.length;\n    const rotatedMatrix = [];\n\n    for (let i = 0; i < len; i++) {\n      rotatedMatrix[i] = [];\n      for (let j = 0; j < len; j++) {\n        rotatedMatrix[i][j] = square[len - j - 1][i];\n      }\n    }\n\n    return rotatedMatrix;\n  },\n\n  rotateMatrixSpecial: (square) => {\n    let rotated = square;\n    if (square[0][0] > 0 || square[0][1] > 0) {\n      rotated = utils.rotateMatrix(rotated);\n      rotated = utils.rotateMatrix(rotated);\n    }\n    rotated = utils.rotateMatrix(rotated);\n\n    return rotated;\n  },\n\n  blockToMatrix: (block, row, col) => {\n    const matrix = [];\n    const blockRow = block.length;\n    const blockCol = block[0].length;\n\n    for (let i = 0; i < row; i++) {\n      matrix[i] = [];\n      for (let j = 0; j < col; j++) {\n        if (i < blockRow && j < blockCol) {\n          matrix[i][j] = block[i][j];\n        } else {\n          matrix[i][j] = 0;\n        }\n      }\n    }\n\n    return matrix;\n  },\n};\n\nexport default utils;\n","import utils from \"../../Utils/utils\";\n\nconst Block = {\n  pieces: [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"],\n  blocks: {\n    I: [[1], [1], [1], [1]],\n    J: [\n      [0, 1],\n      [0, 1],\n      [1, 1],\n    ],\n    L: [\n      [1, 1],\n      [0, 1],\n      [0, 1],\n    ],\n    O: [\n      [1, 1],\n      [1, 1],\n    ],\n    S: [\n      [1, 0],\n      [1, 1],\n      [0, 1],\n    ],\n    T: [\n      [0, 1, 0],\n      [1, 1, 1],\n    ],\n    Z: [\n      [0, 1],\n      [1, 1],\n      [1, 0],\n    ],\n  },\n  blocksForNext: {\n    I: [\n      [0, 0, 0, 0],\n      [1, 1, 1, 1],\n    ],\n    J: [\n      [1, 0, 0],\n      [1, 1, 1],\n    ],\n    L: [\n      [0, 0, 1],\n      [1, 1, 1],\n    ],\n    O: [\n      [1, 1],\n      [1, 1],\n    ],\n    S: [\n      [0, 1, 1],\n      [1, 1, 0],\n    ],\n    T: [\n      [1, 1, 1],\n      [0, 1, 0],\n    ],\n    Z: [\n      [1, 1, 0],\n      [0, 1, 1],\n    ],\n  },\n  new: (letter) => {\n    return {\n      name: letter,\n      content: Block.blocks[letter],\n      index: 0,\n      transformX: 0,\n      transformY: letter === \"I\" ? 1 : 0,\n    };\n  },\n\n  newSquare: (letter) => {\n    return Block.new(letter);\n    //const block = Block.new(letter);\n    //const len = Math.max(block.content.length, block.content[0].length);\n    //block.content = utils.blockToMatrix(block.content, len, len);\n    //return block;\n  },\n\n  next: (letter) => {\n    return {\n      name: letter,\n      content: Block.blocksForNext[letter],\n      index: 0,\n      transformX: 0,\n      transformY: letter === \"I\" ? 1 : 0,\n    };\n  },\n\n  simpleRandom: () => {\n    return Block.new(utils.randomFromArray(Block.pieces));\n  },\n\n  tgm3RandomNext: () => {\n    return Block.next(tgm3Rand.next().value);\n  },\n  tgm3RandomNew: () => {\n    return Block.new(tgm3Rand.next().value);\n  },\n\n  tgm3Random: () => {\n    return tgm3Rand.next().value;\n  },\n  newTgm3Random: () => {\n    tgm3Rand = tgm3Randomizer();\n    return tgm3Rand.next().value;\n  },\n};\n\n//NOTE: new game need to reset this variable\nvar tgm3Rand = tgm3Randomizer();\n\n//https://simon.lc/the-history-of-tetris-randomizers\nfunction* tgm3Randomizer() {\n  let pieces = [\"I\", \"J\", \"L\", \"O\", \"S\", \"T\", \"Z\"];\n  let order = [];\n\n  // Create 35 pool.\n  let pool = pieces.concat(pieces, pieces, pieces, pieces);\n\n  // First piece special conditions\n  const firstPiece = [\"I\", \"J\", \"L\", \"T\"][Math.floor(Math.random() * 4)];\n  yield firstPiece;\n\n  let history = [\"S\", \"Z\", \"S\", firstPiece];\n\n  while (true) {\n    let roll;\n    let i;\n    let piece;\n\n    // Roll For piece\n    for (roll = 0; roll < 6; ++roll) {\n      i = Math.floor(Math.random() * 35);\n      piece = pool[i];\n      if (history.includes(piece) === false || roll === 5) {\n        break;\n      }\n      if (order.length) pool[i] = order[0];\n    }\n\n    // Update piece order\n    if (order.includes(piece)) {\n      order.splice(order.indexOf(piece), 1);\n    }\n    order.push(piece);\n\n    pool[i] = order[0];\n\n    // Update history\n    history.shift();\n    history[3] = piece;\n\n    yield piece;\n  }\n}\n\nexport default Block;\n","import React from \"react\";\nimport Dot from \"./Commons/Dot\";\nimport Block from \"./Commons/Block\";\nimport utils from \"../Utils/utils\";\n\nclass NextBlock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      block: Array(2).fill(Array(4).fill(0)),\n    };\n  }\n\n  render() {\n    const smallBoard = this.state.block.map((row, rowIdx) => {\n      return (\n        <div key={rowIdx}>\n          {row.map((value, colIdx) => {\n            return <Dot key={colIdx} isActivated={value !== 0} />;\n          })}\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <div className=\"section-title\">Next</div>\n\n        {smallBoard}\n\n        <div className=\"button-space\">\n          <button\n            onClick={() => {\n              this.setState({\n                block: utils.blockToMatrix(\n                  Block.tgm3RandomNext().content,\n                  2,\n                  4\n                ),\n              });\n            }}\n          >\n            Random block\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default NextBlock;\n","import React from \"react\";\nimport Dot from \"./Commons/Dot\";\nimport utils from \"../Utils/utils\";\nimport Block from \"./Commons/Block\";\n\nclass RotateBlock extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocks: [\n        { block: Block.newSquare(\"I\"), x: 0, y: 1 },\n        { block: Block.newSquare(\"J\"), x: 0, y: 0 },\n        { block: Block.newSquare(\"L\"), x: 0, y: 0 },\n        { block: Block.newSquare(\"O\"), x: 0, y: 0 },\n        { block: Block.newSquare(\"S\"), x: 0, y: 0 },\n        { block: Block.newSquare(\"T\"), x: 0, y: 0 },\n        { block: Block.newSquare(\"Z\"), x: 0, y: 0 },\n      ],\n    };\n  }\n\n  rotateBlocks(blocks) {\n    blocks.forEach((blockObj) => {\n      blockObj.block = utils.rotateBlock(blockObj.block);\n      blockObj.x = blockObj.x + blockObj.block.transformX;\n      blockObj.y = blockObj.y + blockObj.block.transformY;\n    });\n\n    return blocks;\n  }\n\n  render() {\n    const smallBoard = this.state.blocks.map((blockObj, blockIdx) => {\n      return (\n        <div key={blockIdx} className=\"rotate-block\">\n          {utils.putBlockInSquare(blockObj.block, blockObj.x, blockObj.y).map((row, rowIdx) => (\n            <div key={rowIdx}>\n              {row.map((value, colIdx) => (\n                <Dot key={colIdx} isActivated={value !== 0} />\n              ))}\n            </div>\n          ))}\n          <br />\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <div className=\"section-title\">Rotate</div>\n\n        {smallBoard}\n\n        <div className=\"button-space\">\n          <button\n            onClick={() => {\n              this.setState({ block: this.rotateBlocks(this.state.blocks) });\n            }}\n          >\n            Rotate block\n          </button>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default RotateBlock;\n","const Score = {\n  linePoints: (level, line) => {\n    if (level < 1 || line < 1) {\n      return 0;\n    }\n    \n    switch (line) {\n      case 1:\n        return 40 * level;\n      case 2:\n        return 100 * level;\n      case 3:\n        return 300 * level;\n      case 4:\n        return 1200 * level;\n      default:\n        return 0;\n    }\n  },\n  //Type: 1 soft dropped, 2 hard dropped\n  droppedPoints: (line, type) => {\n    if ((type !== 1 && type !== 2) || line > 20 || line < 1) {\n      return 0;\n    }\n    return line * type;\n  },\n};\n\nexport default Score;\n ","const Speed = {\n  getSpeed: (level) => {\n    switch (level) {\n      case 1:\n        return 1000;\n      case 2:\n        return 793;\n      case 3:\n        return 618; //617.8\n      case 4:\n        return 473; //472.73\n      case 5:\n        return 355; //355.20\n      case 6:\n        return 262;\n      case 7:\n        return 190; //189.68\n      case 8:\n        return 135; //134.73\n      case 9:\n        return 94; //93.88\n      case 10:\n        return 64; //64.15\n      case 11:\n        return 43; //42.98\n      case 12:\n        return 28; //28.22\n      case 13:\n        return 18; //18.15\n      case 14:\n        return 11; //11.44\n      case 15:\n        return 7; //7.06\n      case 16:\n        return 4; //4.26\n      case 17:\n        return 3; //2.52\n      case 18:\n        return 1; //1.46\n      default:\n        return 1000;\n    }\n  },\n};\n\nexport default Speed;\n","import React from \"react\";\nimport Dot from \"./Commons/Dot\";\nimport Block from \"./Commons/Block\";\nimport Score from \"./Commons/Score\";\nimport Speed from \"./Commons/Speed\";\nimport utils from \"../Utils/utils\";\n\nclass Board extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.boardRowCount = 20;\n    this.boardColCount = 10;\n\n    this.mouseUpForDownButton = true;\n\n    this.state = {\n      board: this.initEmptyBoard(),\n      block: Block.newSquare(this.props.movingBlock),\n      blockX: -3,\n      blockY: 4,\n      blockNo: 2,\n      intervalId: null,\n      speed: 1000,\n      inDrop: false,\n      clearedLinePoint: 0,\n      inPlay: true\n    };\n  }\n\n  initEmptyBoard() {\n    return this.getRepeatedRows(this.boardRowCount);\n  }\n\n  componentDidMount() {\n    this.setIntervalNormalMoveDown();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalId);\n  }\n\n  setIntervalNormalMoveDown() {\n    clearInterval(this.state.intervalId);\n    const intervalId = setInterval(() => {\n      this.moveBlock();\n    }, this.state.speed);\n    this.setState({ intervalId: intervalId });\n  }\n\n  createNewBlock() {\n    const blockLetter = this.props.requestNewBlock();\n\n    this.setState({\n      blockX: -3,\n      blockY: 4,\n      block: Block.newSquare(blockLetter),\n    });\n  }\n\n  isFirstRowHaveDot() {\n    return this.state.board[0].some((v) => v > 1);\n  }\n\n  pinCurrentBlock() {\n    const newBoard = this.drawBlockInBoard(this.state.blockNo);\n    this.setState({\n      blockNo: this.state.blockNo + 1,\n    });\n    this.setState({ board: newBoard });\n  }\n\n  getNextRowIndex() {\n    return this.state.blockX + 1;\n  }\n\n  getPreviousRowIndex() {\n    return this.state.blockX - 1;\n  }\n\n  getRepeatedRows(repeats) {\n    const rows = new Array(repeats);\n    for (var i = 0; i < repeats; i++) {\n      rows[i] = new Array(this.boardColCount).fill(0);\n    }\n    return rows;\n  }\n\n  clearFilledRow() {\n    const board = this.state.board;\n\n    const filtered = board.filter((row) => !row.every((cell) => cell >= 1));\n    const newRows = this.getRepeatedRows(board.length - filtered.length);\n\n    const filledRowCount = this.boardRowCount - filtered.length;\n\n    if (filledRowCount > 0) {\n      this.updateClearedLines(filledRowCount);\n      const level = this.calculateLevel();\n      console.log(\"level: \" + level);\n      this.updateSpeed(level);\n      this.props.updateLevels(level);\n      this.props.updateScores(this.calculateScores(level, filledRowCount));\n    }\n\n    this.setState({ board: newRows.concat(filtered) });\n  }\n\n  updateSpeed(level) {\n    const speed = Speed.getSpeed(level);\n    this.setState({ speed: speed });\n\n    this.setIntervalNormalMoveDown();\n    console.log(\"speed: \" + speed);\n  }\n\n  updateClearedLines(line) {\n    let point = 0;\n    // eslint-disable-next-line default-case\n    switch (line) {\n      case 1:\n        point = 1;\n        break;\n      case 2:\n        point = 3;\n        break;\n      case 3:\n        point = 5;\n        break;\n      case 4:\n        point = 8;\n        break;\n    }\n\n    const cleared = this.state.clearedLinePoint + point;\n    this.setState({ clearedLinePoint: cleared });\n\n    console.log(\n      \"line: \" + line + \", point: \" + point + \", cleared: \" + cleared\n    );\n  }\n\n  calculateScores(level, line) {\n    return Score.linePoints(level, line);\n  }\n\n  calculateLevel() {\n    const cleared = this.state.clearedLinePoint;\n    if (cleared === 0) return 1;\n    //1. Fixed goal 10 rows\n    //return parseInt(cleared / 10) + 1;\n\n    //2. Fixed variable: 1 5 rows, 2 10 rows, 3 15 rows,...\n    const totalLevel = parseInt(cleared / 5);\n    let i = 1;\n    let sum = 1;\n    while (sum <= totalLevel) {\n      i++;\n      sum += i;\n    }\n    return i;\n\n    //3. Line values to be variable-goal level\n  }\n\n  drawBlockInBoard(value) {\n    const board = this.state.board;\n    const block = this.state.block.content;\n    const lenX = block.length;\n    const lenY = block[0].length;\n    const x = this.state.blockX;\n    const y = this.state.blockY;\n\n    for (let i = lenX - 1; i >= 0; i--) {\n      for (let j = 0; j < lenY; j++) {\n        if (\n          i + x >= 0 &&\n          j + y >= 0 &&\n          i + x < board.length &&\n          block[i][j] === 1\n        ) {\n          board[i + x][j + y] = value;\n        }\n      }\n    }\n\n    return board;\n  }\n\n  hitNotMovingDot(moveX = 0, moveY = 0) {\n    const block = this.state.block.content;\n    const x = this.state.blockX + moveX;\n    const y = this.state.blockY + moveY;\n    return this.blockHitNotMovingDot(block, x, y);\n  }\n\n  blockHitNotMovingDot(block, x, y) {\n    const board = this.state.board;\n    const lenX = block.length;\n    const lenY = block[0].length;\n\n    for (let i = lenX - 1; i >= 0; i--) {\n      for (let j = 0; j < lenY; j++) {\n        if (\n          i + x >= 0 &&\n          j + y >= 0 &&\n          i + x < board.length &&\n          block[i][j] === 1 &&\n          board[i + x][j + y] > 1\n        ) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  stillCanMoveDown(extraX = 0) {\n    const block = this.state.block.content;\n    const rowHasDot = this.getLastRowHasDot(block);\n    return this.state.blockX + rowHasDot + extraX < this.state.board.length;\n  }\n\n  getLastRowHasDot(block) {\n    const lenX = block.length;\n    const lenY = block[0].length;\n\n    for (let i = lenX - 1; i > 0; i--) {\n      for (let j = 0; j < lenY; j++) {\n        if (block[i][j] > 0) {\n          return i + 1;\n        }\n      }\n    }\n\n    return 1;\n  }\n\n  moveBlock() {\n    if (this.state.inDrop) {\n      return;\n    }\n    const isGameOver = this.isFirstRowHaveDot();\n    if (isGameOver) {\n      clearInterval(this.state.intervalId);\n      return false;\n    }\n    if (!this.stillCanMoveDown() || this.hitNotMovingDot(1, 0)) {\n      this.pinCurrentBlock();\n      this.clearFilledRow();\n      this.createNewBlock();\n    }\n    this.setState({ blockX: this.getNextRowIndex() });\n    return true;\n  }\n\n  getSum(total, num) {\n    return total + Math.round(num);\n  }\n\n  shiftLeftRight(i) {\n    if (this.state.inDrop) {\n      return false;\n    }\n    const content = this.state.block.content;\n    const finalY = this.state.blockY + i;\n\n    if (\n      this.ableToShiftLeftRight(finalY, content) &&\n      !this.hitNotMovingDot(0, i)\n    ) {\n      this.setState({ blockY: finalY });\n      return true;\n    }\n\n    return false;\n  }\n\n  ableToShiftLeftRight(blockY, content) {\n    var rightEdge = blockY + this.getBlockLastIndexOfOne(content);\n    return blockY >= 0 && rightEdge < this.boardColCount;\n  }\n\n  getExtraBlockToWallKick(blockY, newBlock) {\n    var rightEdgeIndex = blockY + this.getBlockLastIndexOfOne(newBlock);\n    return this.boardColCount - 1 - rightEdgeIndex < 0\n      ? this.boardColCount - 1 - rightEdgeIndex\n      : 0;\n  }\n\n  getBlockLastIndexOfOne(block) {\n    //[[0,0,0],[0,1,1],[1,1,0]] => [1,1,1]\n    return block[0]\n      .map((x, idx) => block.reduce((sum, curr) => sum + curr[idx], 0))\n      .map((x) => (x > 0 ? 1 : 0))\n      .lastIndexOf(1);\n  }\n\n  printBlock() {\n    utils.printBlock(this.state.block);\n  }\n\n  rotateBlock() {\n    if (this.state.inDrop) {\n      return;\n    }\n    const block = utils.rotateBlock(this.state.block);\n    if (\n      this.state.blockX +\n        block.transformX +\n        this.getLastRowHasDot(block.content) >\n      this.boardRowCount\n    ) {\n      return;\n    }\n    //need to wall kick both left/right\n    //Only need to kick and kick success then set rotate\n    let right = 0;\n    if (\n      this.state.blockY >= 0 &&\n      this.state.blockY < this.state.board[0].length\n    ) {\n      right = this.getExtraBlockToWallKick(\n        this.state.blockY + block.transformY,\n        block.content\n      );\n    }\n    let newBlockX = this.state.blockX + block.transformX;\n    let newBlockY = Math.max(this.state.blockY + block.transformY + right, 0);\n    if (!this.blockHitNotMovingDot(block.content, newBlockX, newBlockY)) {\n      this.setState({\n        block: block,\n        blockX: newBlockX,\n        blockY: newBlockY,\n      });\n    }\n  }\n\n  checkIsActivated(value, rowIdx, colIdx) {\n    if (value >= 1) {\n      return true;\n    }\n\n    const block = this.state.block.content;\n    const lenX = block.length;\n\n    const x = rowIdx - this.state.blockX;\n    const y = colIdx - this.state.blockY;\n\n    return x >= 0 && x < lenX && y >= 0 && block[x][y] === 1;\n  }\n\n  checkIsInBlock(value, rowIdx, colIdx) {\n    if (value >= 1) {\n      return false;\n    }\n\n    const block = this.state.block.content;\n    const lenX = block.length;\n    const lenY = block[0].length;\n\n    const x = rowIdx - this.state.blockX;\n    const y = colIdx - this.state.blockY;\n\n    return x >= 0 && x < lenX && y >= 0 && y < lenY;\n  }\n\n  drop() {\n    if (this.state.inDrop) {\n      return;\n    }\n\n    this.setState({ inDrop: true });\n\n    let count = 0;\n    while (\n      this.stillCanMoveDown(count) &&\n      !this.hitNotMovingDot(count + 1, 0)\n    ) {\n      count++;\n    }\n\n    this.props.updateScores(Score.droppedPoints(count, 2));\n\n    this.setState({\n      blockX: this.state.blockX + count,\n      inDrop: false,\n    });\n  }\n\n  async repeat() {\n    const current = this.state.block.name;\n    const sleep = (milliseconds) => {\n      return new Promise((resolve) => setTimeout(resolve, milliseconds));\n    };\n    this.mouseUpForDownButton = false;\n    let accelerate = this.state.speed;\n    let lineCount = 0;\n    while (\n      this.moveBlock() &&\n      current === this.state.block.name &&\n      !this.mouseUpForDownButton\n    ) {\n      accelerate = accelerate / 5;\n      lineCount++;\n      await sleep(accelerate);\n    }\n\n    return lineCount;\n  }\n\n  async down() {\n    clearInterval(this.state.intervalId);\n\n    const line = await this.repeat();\n    this.props.updateScores(Score.droppedPoints(line, 1));\n  }\n\n  mouseUp() {\n    this.mouseUpForDownButton = true;\n    this.setIntervalNormalMoveDown();\n  }\n\n  playPause(){\n    if (this.state.inPlay) {\n      clearInterval(this.state.intervalId);\n      this.setState({ inPlay: false });\n    }\n    else {\n      this.setIntervalNormalMoveDown();\n      this.setState({ inPlay: true });\n    }\n  }\n\n  render() {\n    const drawBoard = this.state.board.map((row, rowIdx) => {\n      return (\n        <div key={rowIdx}>\n          {row.map((value, colIdx) => {\n            return (\n              <Dot\n                key={colIdx}\n                isActivated={this.checkIsActivated(value, rowIdx, colIdx)}\n                isInBlock={this.checkIsInBlock(value, rowIdx, colIdx)}\n                value={value}\n              />\n            );\n          })}\n        </div>\n      );\n    });\n\n    return <>{drawBoard}</>;\n  }\n}\n\nexport default Board;\n","import React from \"react\";\n\nclass Control extends React.Component {\n  render() {\n    return (\n      <>\n        <button onClick={this.props.moveLeft}>Left (&larr;)</button>\n        <button onClick={this.props.moveRight}>Right (&rarr;)</button>\n        <button onClick={this.props.rotateBlock}>Rotate (&uarr;)</button>\n        <button onMouseDown={this.props.down} onMouseUp={this.props.mouseUp}>Down (&darr;)</button>\n        <button onClick={this.props.drop}>Drop (SPACE)</button>\n        <br/>\n        <button onClick={this.props.playPause}>Play Pause (P)</button>\n        <button onClick={this.props.resetGame}>Reset (R)</button>\n      </>\n    );\n  }\n}\n\nexport default Control;\n","import React from \"react\";\nimport Dot from \"./Dot\";\nimport Block from \"./Block\";\nimport utils from \"../../Utils/utils\";\n\nclass SmallBoard extends React.Component {\n  render() {\n    const block = utils.blockToMatrix(\n      Block.next(this.props.blockName).content,\n      2,\n      4\n    );\n\n    const smallBoard = block.map((row, rowIdx) => {\n      return (\n        <div key={rowIdx}>\n          {row.map((value, colIdx) => {\n            return <Dot key={colIdx} isActivated={value !== 0} />;\n          })}\n        </div>\n      );\n    });\n\n    return <>{smallBoard}</>;\n  }\n}\n\nexport default SmallBoard;\n","import React from \"react\";\nimport Dot from \"./Commons/Dot\";\nimport Block from \"./Commons/Block\";\n\nclass Decorate extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      blocks: [\n        Block.new(\"I\"),\n        Block.new(\"J\"),\n        Block.new(\"L\"),\n        Block.new(\"O\"),\n        Block.new(\"S\"),\n        Block.new(\"T\"),\n        Block.new(\"Z\"),\n      ],\n    };\n  }\n\n  render() {\n    const smallBoard = this.state.blocks.map((block, blockIdx) => {\n      return (\n        <div key={blockIdx} className=\"decorate-block\">\n          {block.content.map((row, rowIdx) => (\n            <div key={rowIdx}>\n              {row.map((value, colIdx) =>\n                value !== 0 ? (\n                  <Dot key={colIdx} isActivated={value !== 0} />\n                ) : (\n                  \"\"\n                )\n              )}\n            </div>\n          ))}\n        </div>\n      );\n    });\n\n    return <>{smallBoard}</>;\n  }\n}\n\nexport default Decorate;\n","import React from \"react\";\nimport \"./Tetris.css\";\nimport NextBlock from \"./NextBlock\";\nimport RotateBlock from \"./RotateBlock\";\nimport Board from \"./Board\";\nimport Control from \"./Control\";\nimport Block from \"./Commons/Block\";\nimport SmallBoard from \"./Commons/SmallBoard\";\nimport Decorate from \"./Decorate\";\n\nclass Tetris extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentBlockLetter: Block.newTgm3Random(),\n      nextBlockLetter: Block.tgm3Random(),\n      scores: 0,\n      level: 1,\n    };\n\n    //To bind event from child\n    this.newBlockHandler = this.newBlockHandler.bind(this);\n    this.rotateBlockHandler = this.rotateBlockHandler.bind(this);\n    this.updateScores = this.updateScores.bind(this);\n    this.updateLevels = this.updateLevels.bind(this);\n    this.drop = this.drop.bind(this);\n    this.mouseUp = this.mouseUp.bind(this);\n    this.down = this.down.bind(this);\n    this.playPause = this.playPause.bind(this);\n    \n    //To create Refs with child\n    this.board = React.createRef();\n  }\n\n  newBlockHandler() {\n    const block = this.state.nextBlockLetter;\n\n    this.setState({\n      currentBlockLetter: block,\n      nextBlockLetter: Block.tgm3Random(),\n    });\n\n    return block;\n  }\n\n  rotateBlockHandler() {\n    this.inPlay() && this.board.current.rotateBlock();\n  }\n\n  moveBlockHandler(i) {\n    this.inPlay() && this.board.current.shiftLeftRight(i);\n  }\n\n  drop() {\n    this.inPlay() && this.board.current.drop();\n  }\n\n  async down() {\n    if (this.inPlay()){\n      await this.board.current.down();\n    }\n  }\n\n  mouseUp() {\n    if (this.board.current && this.inPlay()) {\n      this.board.current.mouseUp();\n    }\n  }\n\n  playPause() {\n    this.board.current.playPause();\n  }\n\n  inPlay() {\n    return this.board.current.state.inPlay;\n  }\n\n  handleKeyDown = (e) => {\n    e.preventDefault();\n    switch (e.keyCode) {\n      case 32: //Space\n        this.drop();\n        break;\n      case 37: //Left arrow\n        this.moveBlockHandler(-1);\n        break;\n      case 38: //Up arrow\n        this.rotateBlockHandler();\n        break;\n      case 39: //Right arrow\n        this.moveBlockHandler(1);\n        break;\n      case 40: //Down arrow\n        this.down();\n        break;\n      case 80: //P\n      case 112: //p\n        this.playPause();\n        break;\n      case 82: //R\n      case 114: //r\n        this.props.resetGame();\n        break;\n      default:\n        break;\n    }\n  };\n\n  handleKeyUp = (e) => {\n    e.preventDefault();\n    switch (e.keyCode) {\n      case 40:\n        this.mouseUp();\n        break;\n      default:\n        break;\n    }\n  };\n\n  componentDidMount() {\n    document.addEventListener(\"keydown\", this.handleKeyDown, false);\n    document.addEventListener(\"keyup\", this.handleKeyUp, false);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleKeyDown, false);\n  }\n\n  updateScores(scores) {\n    this.setState({ scores: this.state.scores + scores });\n  }\n\n  updateLevels(level) {\n    this.setState({ level: level});\n  }\n\n  render() {\n    return (\n      <>\n        <div className=\"game-title\">Yotta Tetris</div>\n        <div className=\"game-content\">\n          <div className=\"game-decoration\">\n            <Decorate />\n          </div>\n          <div className=\"game-main\">\n            <div className=\"game-board\">\n              <Board\n                ref={this.board}\n                movingBlock={this.state.currentBlockLetter}\n                requestNewBlock={this.newBlockHandler}\n                updateScores={this.updateScores}\n                updateLevels={this.updateLevels}\n              />\n            </div>\n            <div className=\"game-information\">\n              <div className=\"section-title\">Score</div>\n              <div className=\"section-content\">{this.state.scores}</div>\n              <div className=\"section-title\">Level</div>\n              <div className=\"section-content\">{this.state.level}</div>\n              <div className=\"section-title\">Next</div>\n              <div className=\"section-content\">\n                <SmallBoard blockName={this.state.nextBlockLetter} />\n              </div>\n              <div className=\"section-title\">Status</div>\n              <div className=\"section-content\">work in progress</div>\n            </div>\n            <div className=\"game-control\">\n              <Control\n                resetGame={this.props.resetGame}\n                rotateBlock={() => this.rotateBlockHandler}\n                moveLeft={() => this.moveBlockHandler(-1)}\n                moveRight={() => this.moveBlockHandler(1)}\n                drop={this.drop}\n                down={this.down}\n                mouseUp={this.mouseUp}\n                playPause={this.playPause}\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"game-history\">\n          <div className=\"section-title\">\n            History Scores (highest scores: 999999)\n          </div>\n          <table>\n            <thead>\n              <tr>\n                <th className=\"w200\">Time</th>\n                <th className=\"w150\">Level</th>\n                <th className=\"w150\">Score</th>\n              </tr>\n            </thead>\n            <tbody>\n              <tr>\n                <td>00:45:50</td>\n                <td className=\"right-text\">10</td>\n                <td className=\"right-text\">999999</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n\n        <NextBlock />\n        <br />\n        <RotateBlock />\n      </>\n    );\n  }\n}\n\nexport default Tetris;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\n\nimport Tetris from \"./Tetris/Tetris\";\n\nfunction App() {\n  const [gameId, setGameId] = useState(1);\n  return (\n    <div className=\"App\">\n      <Tetris key={gameId} resetGame={() => setGameId(gameId + 1)} />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Tetris from \"./Tetris/Tetris\"\nimport App from \"./App\";\n\n\nReactDOM.render(\n\t<App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}